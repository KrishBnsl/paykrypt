"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Bot, Send, User } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import UserSelector from "../user-selector"
import { authService, db } from "@/lib/db"

export default function AIAssistantPage() {
  const [messages, setMessages] = useState<Array<{ role: "user" | "assistant"; content: string }>>([
    {
      role: "assistant",
      content: "Hello! I'm your AI banking assistant for PayKrypt. How can I help you with your banking needs today?",
    },
  ])
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [userId, setUserId] = useState<string | null>(null)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    const currentUser = authService.getCurrentUser()
    if (currentUser) {
      setUserId(currentUser.id)
    }
  }, [])

  const handleSendMessage = () => {
    if (!input.trim()) return

    // Add user message
    const userMessage = { role: "user" as const, content: input }
    setMessages((prev) => [...prev, userMessage])
    setInput("")
    setIsLoading(true)

    // Simulate AI response based on query
    setTimeout(() => {
      const user = authService.getCurrentUser()

      // Custom responses based on user query
      let aiResponse = ""
      const query = input.toLowerCase()

      if (query.includes("balance") || query.includes("account")) {
        aiResponse = `Your total balance is $${user?.balance.toFixed(2)}. You have ${user?.accounts.length} active accounts.`
      } else if (query.includes("transaction") || query.includes("payment")) {
        const recentTransactions = db
          .getTransactionsByUserId(user?.id || "")
          .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
          .slice(0, 3)

        aiResponse = `Here are your most recent transactions:\n\n${recentTransactions
          .map((t, i) => `${i + 1}. ${t.description}: $${t.amount.toFixed(2)} (${t.status.toLowerCase()})`)
          .join("\n")}`
      } else if (query.includes("fraud") || query.includes("security")) {
        aiResponse =
          "Our fraud detection system uses CNN and LSTM-based models to analyze transaction patterns in real-time. Your account is protected with quantum-secure encryption, and we use federated learning to improve our detection capabilities without compromising your privacy."
      } else if (query.includes("spending") || query.includes("budget")) {
        const categories = db.getUserSpendingCategories(user?.id || "")
        const topCategory = categories.sort((a, b) => b.percentage - a.percentage)[0]

        aiResponse = `Your highest spending category is ${topCategory.name} at ${topCategory.percentage}% of your budget. I recommend keeping housing costs below 30% of your income and saving at least 15-20% each month.`
      } else if (query.includes("risk") || query.includes("score")) {
        aiResponse =
          "Your current risk score is Low. Our AI system has detected no unusual activity in your recent transactions. We use a combination of CNN and LSTM models to analyze spatial and temporal patterns in your transaction behavior."
      } else {
        const responses = [
          "I've analyzed your recent transactions and everything looks normal. Your account is well-protected by our quantum-secure encryption.",
          "Based on your spending patterns, our AI has detected no unusual activity. Your risk score remains low.",
          "Our fraud detection system has been trained on synthetic data generated by advanced diffusion models, allowing us to identify even the most sophisticated fraud attempts.",
          "The federated learning system we use allows us to improve fraud detection across all users while maintaining your privacy. Your data never leaves your account.",
        ]

        aiResponse = responses[Math.floor(Math.random() * responses.length)]
      }

      setMessages((prev) => [...prev, { role: "assistant", content: aiResponse }])
      setIsLoading(false)
    }, 1500)
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  // Auto-scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  return (
    <div className="container mx-auto max-w-4xl py-6">
      <div className="flex justify-between mb-6">
        <h1 className="text-3xl font-bold">AI Banking Assistant</h1>
        <UserSelector />
      </div>

      <Card className="h-[calc(100vh-12rem)]">
        <CardHeader>
          <CardTitle>PayKrypt AI Assistant</CardTitle>
          <CardDescription>Powered by advanced AI with agentic reasoning and quantum-secure encryption</CardDescription>
        </CardHeader>
        <CardContent className="p-0">
          <ScrollArea className="h-[calc(100vh-20rem)] px-4">
            <div className="space-y-4 pt-4">
              {messages.map((message, index) => (
                <div key={index} className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}>
                  <div className={`flex gap-3 max-w-[80%] ${message.role === "user" ? "flex-row-reverse" : ""}`}>
                    <Avatar className="h-8 w-8">
                      {message.role === "assistant" ? (
                        <>
                          <AvatarImage src="/placeholder.svg?height=32&width=32" />
                          <AvatarFallback>
                            <Bot className="h-4 w-4" />
                          </AvatarFallback>
                        </>
                      ) : (
                        <>
                          <AvatarImage src="/placeholder.svg?height=32&width=32" />
                          <AvatarFallback>
                            <User className="h-4 w-4" />
                          </AvatarFallback>
                        </>
                      )}
                    </Avatar>
                    <div
                      className={`rounded-lg px-4 py-2 ${
                        message.role === "user" ? "bg-primary text-primary-foreground" : "bg-muted"
                      }`}
                    >
                      <p className="whitespace-pre-line">{message.content}</p>
                    </div>
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className="flex justify-start">
                  <div className="flex gap-3 max-w-[80%]">
                    <Avatar className="h-8 w-8">
                      <AvatarImage src="/placeholder.svg?height=32&width=32" />
                      <AvatarFallback>
                        <Bot className="h-4 w-4" />
                      </AvatarFallback>
                    </Avatar>
                    <div className="rounded-lg px-4 py-2 bg-muted">
                      <p>Thinking...</p>
                    </div>
                  </div>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>
          </ScrollArea>
        </CardContent>
        <CardFooter className="border-t p-4">
          <div className="flex w-full items-center space-x-2">
            <Input
              placeholder="Ask about transactions, security, or payment issues..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyDown}
              className="flex-1"
            />
            <Button onClick={handleSendMessage} disabled={!input.trim() || isLoading}>
              <Send className="h-4 w-4" />
              <span className="sr-only">Send</span>
            </Button>
          </div>
        </CardFooter>
      </Card>
    </div>
  )
}
